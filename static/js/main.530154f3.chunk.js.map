{"version":3,"sources":["components/Node/Node.js","models/node.js","utils/mazeUtils.js","utils/mazeGeneration/recursiveBacktracker.js","utils/nodeUtils.js","utils/pathfinding/aStar.js","utils/pathfinding/dijkstra.js","components/Grid/Grid.js","utils/mazeGeneration/prims.js","utils/pathfinding/bfs.js","utils/pathfinding/dfs.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","row","col","key","id","className","getFrontiers","grid","top","bottom","right","left","frontiers","isValidFrontier","push","frontier","length","this","visited","walls","parent","isPathNode","MazeUtils","initGrid","newGrid","shuffle","arr","i","j","Math","floor","random","getRandomIndex","breakWall","currNode","row1","col1","row2","x","y","isValidPath","adjNode","generatePath","endNode","path","current","reverse","NodeUtils","updateNodeStyle","nodeStyle","document","getElementById","style","borderTop","borderBottom","borderRight","borderLeft","backgroundColor","resetNodeStyle","getDirection","calcCost","abs","calcHeuristic","getLowestCostFNode","openSet","index","f","splice","getLowestCostGNode","g","Grid","useEffect","status","maze","recursive","stack","currCell","cell","pop","includes","MazeGen","generateMaze","prims","rootCell","toVisit","forEach","pathfinding","closedSet","startNode","h","Pathfinding","queue","set","shift","setTimeout","algorithm","map","rowIndex","Navbar","handleClickStatus","handleClickMaze","handleClickPathfinding","Nav","NavDropdown","title","Item","name","onClick","alignRight","disabled","App","useState","setStatus","setMaze","setPathfinding","Container","fluid","e","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAGaA,G,MAAO,SAACC,GAAW,IAAD,EACNA,EAAMC,KAAnBC,EADmB,EACnBA,IAAKC,EADc,EACdA,IAEb,OACI,wBACIC,IAAG,WAAMF,EAAN,YAAaC,EAAb,KACHE,GAAE,eAAUH,EAAV,YAAiBC,GACnBG,UAAS,W,gBCVAP,EACjB,WAAYG,EAAKC,GAAM,IAAD,gCAUtBI,aAAe,SAACC,GACZ,IAAIC,EAAM,CAAC,EAAKP,IAAM,EAAG,EAAKC,KAC1BO,EAAS,CAAC,EAAKR,IAAM,EAAG,EAAKC,KAC7BQ,EAAQ,CAAC,EAAKT,IAAK,EAAKC,IAAM,GAC9BS,EAAO,CAAC,EAAKV,IAAK,EAAKC,IAAM,GAC3BU,EAAY,GAkBlB,OAhBI,EAAKC,gBAAgBL,EAAKD,IAC1BK,EAAUE,KAAKP,EAAKC,EAAI,IAAIA,EAAI,KAGhC,EAAKK,gBAAgBJ,EAAQF,IAC7BK,EAAUE,KAAKP,EAAKE,EAAO,IAAIA,EAAO,KAGtC,EAAKI,gBAAgBH,EAAOH,IAC5BK,EAAUE,KAAKP,EAAKG,EAAM,IAAIA,EAAM,KAGpC,EAAKG,gBAAgBF,EAAMJ,IAC3BK,EAAUE,KAAKP,EAAKI,EAAK,IAAIA,EAAK,KAG/BC,GAjCW,KAqCtBC,gBAAkB,SAACE,EAAUR,GACzB,OACIQ,EAAS,GAAKR,EAAKS,QACnBD,EAAS,IAAM,GACfA,EAAS,GAAKR,EAAKS,QACnBD,EAAS,IAAM,GAzCnBE,KAAKhB,IAAMA,EACXgB,KAAKf,IAAMA,EACXe,KAAKC,SAAU,EACfD,KAAKE,MAAQ,EAAC,GAAM,GAAM,GAAM,GAChCF,KAAKG,OAAS,KACdH,KAAKI,YAAa,GCLLC,E,kCAAAA,EACVC,SAAW,WAEd,IADA,IAAMC,EAAU,GACPvB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAC/BuB,EAAQvB,GAAO,GACf,IAAK,IAAIC,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAC/B,IAAMF,EAAO,IAAIF,EAAKG,EAAKC,GAC3BsB,EAAQvB,GAAKa,KAAKd,IAG1B,OAAOwB,GAVMF,EAeVG,QAAU,SAACC,GACd,IAAK,IAAIC,EAAID,EAAIV,OAAS,EAAGW,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAElB,CAACD,EAAIE,GAAIF,EAAIC,IAA/BD,EAAIC,GAFgC,KAE5BD,EAAIE,GAFwB,KAIzC,OAAOF,GApBMJ,EAyBVU,eAAiB,WACpB,OAAOH,KAAKC,MAAsB,GAAhBD,KAAKE,WA1BVT,EAgCVW,UAAY,SAACC,EAAUnB,GAC1B,IAAMoB,EAAOD,EAASjC,IAChBmC,EAAOF,EAAShC,IAChBmC,EAAOtB,EAASd,IAEhBqC,EAAIF,EADGrB,EAASb,IAEhBqC,EAAIJ,EAAOE,EAGP,IAANC,GAAiB,IAANC,IACXL,EAASf,MAAM,IAAK,EACpBJ,EAASI,MAAM,IAAK,GAGd,IAANmB,IAAkB,IAAPC,IACXL,EAASf,MAAM,IAAK,EACpBJ,EAASI,MAAM,IAAK,GAGd,IAANmB,GAAiB,IAANC,IACXL,EAASf,MAAM,IAAK,EACpBJ,EAASI,MAAM,IAAK,IAGb,IAAPmB,GAAkB,IAANC,IACZL,EAASf,MAAM,IAAK,EACpBJ,EAASI,MAAM,IAAK,IA1DXG,EAgEVkB,YAAc,SAACN,EAAUO,GAC5B,IAAMN,EAAOD,EAASjC,IAChBmC,EAAOF,EAAShC,IAChBmC,EAAOI,EAAQxC,IAGfqC,EAAIF,EAFGK,EAAQvC,IAGfqC,EAAIJ,EAAOE,EAEjB,OAAU,IAANC,GAAiB,IAANC,GACkB,IAAtBL,EAASf,MAAM,KAAqC,IAArBsB,EAAQtB,MAAM,GAC9C,IAANmB,IAAkB,IAAPC,GACkB,IAAtBL,EAASf,MAAM,KAAqC,IAArBsB,EAAQtB,MAAM,GAC9C,IAANmB,GAAiB,IAANC,GACkB,IAAtBL,EAASf,MAAM,KAAqC,IAArBsB,EAAQtB,MAAM,IAC7C,IAAPmB,GAAkB,IAANC,GACiB,IAAtBL,EAASf,MAAM,KAAqC,IAArBsB,EAAQtB,MAAM,QADxD,GA/EaG,EAqFVoB,aAAe,SAACC,GACnB,IAAIC,EAAO,GACPC,EAAUF,EAGd,IAFAE,EAAQxB,YAAa,EAEdwB,EAAQzB,QACXyB,EAAQzB,OAAOC,YAAa,EAC5BuB,EAAK9B,KAAK+B,EAAQzB,QAClByB,EAAUA,EAAQzB,OAItB,OADAwB,EAAKE,UACEF,GCjGR,ICFcG,E,kCAAAA,EAEVC,gBAAkB,SAAChD,GACtB,IAAMiD,EAAYC,SAASC,eAAT,eACNnD,EAAKC,IADC,YACMD,EAAKE,MAC3BkD,MAEGpD,EAAKmB,MAAM,KAAI8B,EAAUI,UAAY,QACrCrD,EAAKmB,MAAM,KAAI8B,EAAUK,aAAe,QACxCtD,EAAKmB,MAAM,KAAI8B,EAAUM,YAAc,QACvCvD,EAAKmB,MAAM,KAAI8B,EAAUO,WAAa,QACvCxD,EAAKkB,UAAS+B,EAAUQ,gBAAkB,WAC1CzD,EAAKqB,aAAY4B,EAAUQ,gBAAkB,UAZpCV,EAgBVW,eAAiB,SAAC1D,GACrB,IAAMiD,EAAYC,SAASC,eAAT,eACNnD,EAAKC,IADC,YACMD,EAAKE,MAC3BkD,MAEFH,EAAUI,UAAY,oBACtBJ,EAAUK,aAAe,oBACzBL,EAAUM,YAAc,oBACxBN,EAAUO,WAAa,oBACvBP,EAAUQ,gBAAkB,WAzBfV,EA4BVY,aAAe,SAACzB,EAAUnB,GAC7B,IAAMuB,EAAIJ,EAASjC,IAAMc,EAASd,IAC5BsC,EAAIL,EAAShC,IAAMa,EAASb,IAElC,OAAU,IAANoC,GAAiB,IAANC,EAAgB,KACrB,IAAND,IAAkB,IAAPC,EAAiB,OACtB,IAAND,GAAiB,IAANC,EAAgB,QACpB,IAAPD,GAAkB,IAANC,EAAgB,aAAhC,GAnCaQ,EAsCVa,SAAW,SAAC1B,EAAUO,GAIzB,OAHUZ,KAAKgC,IAAI3B,EAASjC,IAAMwC,EAAQxC,KAChC4B,KAAKgC,IAAI3B,EAAShC,IAAMuC,EAAQvC,MCrC3C,IAsDD4D,EAAgB,SAACnB,EAASF,GAI5B,OAHUZ,KAAKgC,IAAIlB,EAAQ1C,IAAMwC,EAAQxC,KAC/B4B,KAAKgC,IAAIlB,EAAQzC,IAAMuC,EAAQvC,MAKvC6D,EAAqB,SAACC,GAGxB,IAFA,IAAIC,EAAQ,EAEHtC,EAAI,EAAGA,EAAIqC,EAAQhD,OAAQW,IAE5BqC,EAAQC,GAAOC,EAAIF,EAAQrC,GAAGuC,IAAGD,EAAQtC,GAIjD,OAAOqC,EAAQG,OAAOF,EAAO,GAAG,ICzB9BG,EAAqB,SAACJ,GAGxB,IAFA,IAAIC,EAAQ,EAEHtC,EAAI,EAAGA,EAAIqC,EAAQhD,OAAQW,IAE5BqC,EAAQC,GAAOI,EAAIL,EAAQrC,GAAG0C,IAAGJ,EAAQtC,GAIjD,OAAOqC,EAAQG,OAAOF,EAAO,GAAG,ICjDhC1D,G,MAAOe,EAAUC,YAER+C,EAAO,SAACvE,GACjBwE,qBAAU,WACN,OAAQxE,EAAMyE,QACV,IAAK,SACD,GAAmB,0BAAfzE,EAAM0E,KAAkC,CACxC,IAAMC,EJbU,SAACnE,GACjC,IAAMoE,EAAQ,GACRzD,EAAU,GACV0D,EACFrE,EAAKe,EAAUU,kBAAkBV,EAAUU,kBAM/C,IAHA2C,EAAM7D,KAAK8D,GACX1D,EAAQJ,KAAK8D,GAEND,EAAM3D,OAAS,GAAG,CACrB,IADqB,EACf6D,EAAOF,EAAMG,MAGblE,EAAYU,EAAUG,QAAQoD,EAAKvE,aAAaC,IAJjC,cAMAK,GANA,IAMrB,2BAAgC,CAAC,IAAxBG,EAAuB,QAC5B,IAAKG,EAAQ6D,SAAShE,GAAW,CAC7B4D,EAAM7D,KAAK+D,GACXvD,EAAUW,UAAU4C,EAAM9D,GAC1BG,EAAQJ,KAAKC,GACb4D,EAAM7D,KAAKC,GACX,QAZa,+BAiBzB,OAAOG,EId2B8D,CAA6BzE,GAC/C0E,EAAaP,EAAW,QACrB,GAAmB,WAAf3E,EAAM0E,KAAmB,CAChC,IAAMS,EChBI,SAAC3E,GAC3B,IAAMN,EAAMqB,EAAUU,iBAChB9B,EAAMoB,EAAUU,iBAChBmD,EAAW5E,EAAKN,GAAKC,GACrBkF,EAAU,GACVlE,EAAU,GAEhBkE,EAAQtE,KAAKqE,GACb,IARoC,iBAShC,IAAMP,EAAWQ,EAAQN,MACzB5D,EAAQJ,KAAK8D,GAEb,IAAMhE,EAAYgE,EAAStE,aAAaC,GACpCK,EAAUI,OAAS,GAEOM,EAAUG,QAAQb,GAC1ByE,SAAQ,SAACtE,GAGlBG,EAAQ6D,SAAShE,IACjBqE,EAAQL,SAAShE,KAElBO,EAAUW,UAAU2C,EAAU7D,GAC9BqE,EAAQtE,KAAKC,QAftBqE,EAAQpE,OAAS,GAAI,IAqB5B,OAAOE,EDbuB8D,CAAuBzE,GACrC0E,EAAaC,EAAO,GAExB,MACJ,IAAK,QACD,GAA0B,cAAtBnF,EAAMuF,YAA6B,CACnC,IAAMA,EFrBL,SAAC/E,GAClB,IAAMyD,EAAU,GACVuB,EAAY,GACZC,EAAYjF,EAAK,GAAG,GACpBoC,EAAUpC,EAAK,IAAI,IAEzBiF,EAAUtB,EAAIsB,EAAUnB,EAAImB,EAAUC,EAAI,EAE1CzB,EAAQlD,KAAK0E,GACb,IAT2B,iBAUvB,IAAMtD,EAAW6B,EAAmBC,GAKpC,GAJA9B,EAAShB,SAAU,EACnBqE,EAAUzE,KAAKoB,GAGXA,IAAaS,EAAS,cAERT,EAAS5B,aAAaC,GAC9B8E,SAAQ,SAACtE,GAEXO,EAAUkB,YAAYN,EAAUnB,KAC/BwE,EAAUR,SAAShE,KAEfiD,EAAQe,SAAShE,GAYXA,EAASsD,EAAInC,EAASmC,IAE7BtD,EAASK,OAASc,EAGlBnB,EAASsD,EACLnC,EAASmC,EAAItB,EAAUa,SAAS1B,EAAUnB,GAC9CA,EAASmD,EAAInD,EAASsD,EAAItD,EAAS0E,IAjBnC1E,EAASsD,EACLnC,EAASmC,EAAItB,EAAUa,SAAS1B,EAAUnB,GAC9CA,EAAS0E,EAAI3B,EAAcnB,EAAS5B,GACpCA,EAASmD,EAAInD,EAASsD,EAAItD,EAAS0E,EAGnC1E,EAASK,OAASc,EAGlB8B,EAAQlD,KAAKC,SAzBtBiD,EAAQhD,OAAS,GAAG,kBAMG,MAiC9B,OAAOuE,EE3B6BG,CAAkBnF,GACtC0E,EAAaK,EAAa,QACvB,GAA0B,eAAtBvF,EAAMuF,YAA8B,CAC3C,IAAMA,EDxBF,SAAC/E,GACrB,IAAMyD,EAAU,GACVuB,EAAY,GACZC,EAAYjF,EAAK,GAAG,GACpBoC,EAAUpC,EAAK,IAAI,IAEzByD,EAAQlD,KAAK0E,GACb,IAP8B,iBAQ1B,IAAMtD,EAAWkC,EAAmBJ,GAKpC,GAJA9B,EAAShB,SAAU,EACnBqE,EAAUzE,KAAKoB,GAGXA,IAAaS,EAAS,cAERT,EAAS5B,aAAaC,GAC9B8E,SAAQ,SAACtE,GAEXO,EAAUkB,YAAYN,EAAUnB,KAC/BwE,EAAUR,SAAShE,KAEfiD,EAAQe,SAAShE,GASXA,EAASsD,EAAInC,EAASmC,IAE7BtD,EAASK,OAASc,EAGlBnB,EAASsD,EACLnC,EAASmC,EAAItB,EAAUa,SAAS1B,EAAUnB,KAd9CA,EAASsD,EACLnC,EAASmC,EAAItB,EAAUa,SAAS1B,EAAUnB,GAG9CA,EAASK,OAASc,EAGlB8B,EAAQlD,KAAKC,SAtBtBiD,EAAQhD,OAAS,GAAG,kBAMG,MA6B9B,OAAOuE,EClB6BG,CAAqBnF,GACzC0E,EAAaK,EAAa,QACvB,GAA0B,QAAtBvF,EAAMuF,YAAuB,CACpC,IAAMA,EE5BP,SAAC/E,GAChB,IAAMiF,EAAYjF,EAAK,GAAG,GACpBoC,EAAUpC,EAAK,IAAI,IACnBoF,EAAQ,GACRC,EAAM,GAEZD,EAAM7E,KAAK0E,GACX,IAPyB,iBAQrB,IAAMtD,EAAWyD,EAAME,QAIvB,GAHA3D,EAAShB,SAAU,EAEnB0E,EAAI9E,KAAKoB,GACLA,IAAaS,EAAS,cAERrB,EAAUG,QAAQS,EAAS5B,aAAaC,IAChD8E,SAAQ,SAACtE,IAEXO,EAAUkB,YAAYN,EAAUnB,IAC/B6E,EAAIb,SAAShE,IACb4E,EAAMZ,SAAShE,KAEhBA,EAASK,OAASc,EAClByD,EAAM7E,KAAKC,QAfhB4E,EAAM3E,OAAS,GAAG,kBAKK,MAe9B,OAAO4E,EFC6BF,CAAgBnF,GACpC0E,EAAaK,EAAa,QACvB,GAA0B,QAAtBvF,EAAMuF,YAAuB,CACpC,IAAMA,EG/BP,SAAC/E,GAChB,IAAMiF,EAAYjF,EAAK,GAAG,GACpBoC,EAAUpC,EAAK,IAAI,IACnBoE,EAAQ,GACRiB,EAAM,GAEZjB,EAAM7D,KAAK0E,GACX,IAPyB,iBAQrB,IAAMtD,EAAWyC,EAAMG,MAIvB,GAHA5C,EAAShB,SAAU,EAEnB0E,EAAI9E,KAAKoB,GACLA,IAAaS,EAAS,cAERrB,EAAUG,QAAQS,EAAS5B,aAAaC,IAChD8E,SAAQ,SAACtE,IAEXO,EAAUkB,YAAYN,EAAUnB,IAC/B6E,EAAIb,SAAShE,IACb4D,EAAMI,SAAShE,KAEhBA,EAASK,OAASc,EAClByC,EAAM7D,KAAKC,QAfhB4D,EAAM3D,OAAS,GAAG,kBAKK,MAe9B,OAAO4E,EHI6BF,CAAgBnF,GACpC0E,EAAaK,EAAa,GAG9BQ,YAAW,WACP,IAAMlD,EAAOtB,EAAUoB,aAAanC,EAAK,IAAI,KAC7C0E,EAAarC,EAAM,KACpB,KACH,MACJ,QAEIrC,EAAK4D,OAAL,MAAA5D,EAAI,CAAQ,EAAGA,EAAKS,QAAhB,mBAA2BM,EAAUC,cACzChB,EAAK8E,SAAQ,SAACpF,GACVA,EAAIoF,SAAQ,SAACrF,GACT+C,EAAUW,eAAe1D,YAK1C,CAACD,EAAMyE,SAEV,IAAMS,EAAe,SAAfA,EAAgBc,EAAW9B,GACzBA,EAAQ8B,EAAU/E,QAClB8E,YAAW,WAEP/C,EAAUC,gBAAgB+C,EAAU9B,IAGpCgB,EAAac,EAAW9B,EAAQ,KACjC,KAIX,OACI,2BAAO5D,UAAU,QACb,+BACKE,EAAKyF,KAAI,SAAC/F,EAAKgG,GAAN,OACN,wBAAI5F,UAAU,WAAWF,IAAK8F,GACzBhG,EAAI+F,KAAI,SAAChG,EAAMG,GACZ,OAAO,kBAAC,EAAD,CAAMH,KAAMA,EAAMG,IAAKA,c,gBIpE7C+F,G,MAAS,SAACnG,GAAW,IAE1ByE,EAMAzE,EANAyE,OACAC,EAKA1E,EALA0E,KACAa,EAIAvF,EAJAuF,YACAa,EAGApG,EAHAoG,kBACAC,EAEArG,EAFAqG,gBACAC,EACAtG,EADAsG,uBAGJ,OACI,kBAACC,EAAA,EAAD,CAAKjG,UAAU,UACX,kBAACkG,EAAA,EAAD,CAAanG,GAAG,WAAWoG,MAAO/B,GAC9B,kBAAC8B,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,wBACLC,QAASP,GAHb,yBAOA,kBAACG,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,SACLC,QAASP,GAHb,WAQJ,kBAACG,EAAA,EAAD,CAAanG,GAAG,WAAWwG,YAAU,EAACJ,MAAOlB,GACzC,kBAACiB,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,YACLC,QAASN,GAHb,aAOA,kBAACE,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,aACLC,QAASN,GAHb,cAOA,kBAACE,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,MACLC,QAASN,GAHb,wBAOA,kBAACE,EAAA,EAAYE,KAAb,CACIpG,UAAU,gBACVqG,KAAK,MACLC,QAASN,GAHb,uBAQJ,4BACIK,KAAK,SACLG,SAAmB,SAATpC,GAA8B,UAAXD,EAC7BmC,QAASR,GAHb,UAOA,4BAAQO,KAAK,QAAQC,QAASR,GAA9B,SAGA,4BACIO,KAAK,QACLG,SAA0B,gBAAhBvB,GAA4C,WAAXd,EAC3CmC,QAASR,GAHb,Y,QC9BGW,G,YAnCH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACPvC,EADO,KACCwC,EADD,OAEUD,mBAAS,QAFnB,mBAEPtC,EAFO,KAEDwC,EAFC,OAGwBF,mBAAS,eAHjC,mBAGPzB,EAHO,KAGM4B,EAHN,KAoBd,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,CACI5C,OAAQA,EACRC,KAAMA,EACNa,YAAaA,EACba,kBArBc,SAACkB,GACvBA,EAAEC,iBACFN,EAAUK,EAAEE,OAAOb,OAoBXN,gBAjBY,SAACiB,GACrBA,EAAEC,iBACFL,EAAQI,EAAEE,OAAOb,OAgBTL,uBAbmB,SAACgB,GAC5BA,EAAEC,iBACFJ,EAAeG,EAAEE,OAAOb,SAapB,kBAAC,EAAD,CAAMlC,OAAQA,EAAQC,KAAMA,EAAMa,YAAaA,OCzBvCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ7E,SAASC,eAAe,SD0HtB,kBAAmB6E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.530154f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport const Node = (props) => {\r\n    const { row, col } = props.node;\r\n\r\n    return (\r\n        <td\r\n            key={`(${row},${col})`}\r\n            id={`node-${row}-${col}`}\r\n            className={`node`}\r\n        ></td>\r\n    );\r\n};","export default class Node {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.visited = false;\r\n        this.walls = [true, true, true, true];\r\n        this.parent = null;\r\n        this.isPathNode = false;\r\n    }\r\n\r\n    // This method returns all neighboring nodes of the current node\r\n    getFrontiers = (grid) => {\r\n        let top = [this.row - 1, this.col];\r\n        let bottom = [this.row + 1, this.col];\r\n        let right = [this.row, this.col + 1];\r\n        let left = [this.row, this.col - 1];\r\n        const frontiers = [];\r\n\r\n        if (this.isValidFrontier(top, grid)) {\r\n            frontiers.push(grid[top[0]][top[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(bottom, grid)) {\r\n            frontiers.push(grid[bottom[0]][bottom[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(right, grid)) {\r\n            frontiers.push(grid[right[0]][right[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(left, grid)) {\r\n            frontiers.push(grid[left[0]][left[1]]);\r\n        }\r\n\r\n        return frontiers;\r\n    };\r\n\r\n    // This method checks a frontier to see if it lies within the bounds of the grid\r\n    isValidFrontier = (frontier, grid) => {\r\n        return (\r\n            frontier[0] < grid.length &&\r\n            frontier[0] >= 0 &&\r\n            frontier[1] < grid.length &&\r\n            frontier[1] >= 0\r\n        );\r\n    };\r\n}\r\n","import Node from \"../models/node\";\r\n\r\nexport default class MazeUtils {\r\n    static initGrid = () => {\r\n        const newGrid = [];\r\n        for (let row = 0; row < 25; row++) {\r\n            newGrid[row] = []; // Current row\r\n            for (let col = 0; col < 25; col++) {\r\n                const node = new Node(row, col);\r\n                newGrid[row].push(node);\r\n            }\r\n        }\r\n        return newGrid;\r\n    };\r\n\r\n    // Fisher-Yates shuffle algorithm\r\n    // Used to randomize order of frontiers\r\n    static shuffle = (arr) => {\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    // This method returns a random number from 0 to 24\r\n    // Used to retrieve a random node\r\n    static getRandomIndex = () => {\r\n        return Math.floor(Math.random() * 24);\r\n    };\r\n\r\n    // This method takes two nodes and determines which wall to break\r\n    // depending on the results of subtracting the first node's row/col\r\n    // by the neighboring node's row/col\r\n    static breakWall = (currNode, frontier) => {\r\n        const row1 = currNode.row;\r\n        const col1 = currNode.col;\r\n        const row2 = frontier.row;\r\n        const col2 = frontier.col;\r\n        const x = col1 - col2;\r\n        const y = row1 - row2;\r\n\r\n        // Break top wall\r\n        if (x === 0 && y === 1) {\r\n            currNode.walls[0] = false;\r\n            frontier.walls[1] = false;\r\n        }\r\n        // Break bottom wall\r\n        if (x === 0 && y === -1) {\r\n            currNode.walls[1] = false;\r\n            frontier.walls[0] = false;\r\n        }\r\n        // Break left wall\r\n        if (x === 1 && y === 0) {\r\n            currNode.walls[3] = false;\r\n            frontier.walls[2] = false;\r\n        }\r\n        // Break right wall\r\n        if (x === -1 && y === 0) {\r\n            currNode.walls[2] = false;\r\n            frontier.walls[3] = false;\r\n        }\r\n    };\r\n\r\n    // This method checks if there is a wall between the current node\r\n    // and the adjacent node to determine if the path is traversable\r\n    static isValidPath = (currNode, adjNode) => {\r\n        const row1 = currNode.row;\r\n        const col1 = currNode.col;\r\n        const row2 = adjNode.row;\r\n        const col2 = adjNode.col;\r\n\r\n        const x = col1 - col2;\r\n        const y = row1 - row2;\r\n\r\n        if (x === 0 && y === 1)\r\n            return currNode.walls[0] === false && adjNode.walls[1] === false;\r\n        if (x === 0 && y === -1)\r\n            return currNode.walls[1] === false && adjNode.walls[0] === false;\r\n        if (x === 1 && y === 0)\r\n            return currNode.walls[3] === false && adjNode.walls[2] === false;\r\n        if (x === -1 && y === 0)\r\n            return currNode.walls[2] === false && adjNode.walls[3] === false;\r\n    };\r\n\r\n    // This method generates the optimal path to traverse the maze\r\n    // by backtracking (starting from the end node) using the parent\r\n    static generatePath = (endNode) => {\r\n        let path = [];\r\n        let current = endNode;\r\n        current.isPathNode = true;\r\n\r\n        while (current.parent) {\r\n            current.parent.isPathNode = true;\r\n            path.push(current.parent);\r\n            current = current.parent;\r\n        }\r\n\r\n        path.reverse();\r\n        return path;\r\n    };\r\n}\r\n","import MazeUtils from \"../mazeUtils\";\r\n\r\nexport const recursiveBacktracker = (grid) => {\r\n    const stack = [];\r\n    const visited = [];\r\n    const currCell =\r\n        grid[MazeUtils.getRandomIndex()][MazeUtils.getRandomIndex()];\r\n\r\n    // Push start cell to stack and visited set\r\n    stack.push(currCell);\r\n    visited.push(currCell);\r\n\r\n    while (stack.length > 0) {\r\n        const cell = stack.pop();\r\n\r\n        // Get Frontiers and randomize the order\r\n        const frontiers = MazeUtils.shuffle(cell.getFrontiers(grid));\r\n\r\n        for (let frontier of frontiers) {\r\n            if (!visited.includes(frontier)) {\r\n                stack.push(cell);\r\n                MazeUtils.breakWall(cell, frontier);\r\n                visited.push(frontier);\r\n                stack.push(frontier);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};\r\n","export default class NodeUtils {\r\n    // Update css of node style after running generate, clear, or solve\r\n    static updateNodeStyle = (node) => {\r\n        const nodeStyle = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n        ).style;\r\n\r\n        if (!node.walls[0]) nodeStyle.borderTop = \"none\";\r\n        if (!node.walls[1]) nodeStyle.borderBottom = \"none\";\r\n        if (!node.walls[2]) nodeStyle.borderRight = \"none\";\r\n        if (!node.walls[3]) nodeStyle.borderLeft = \"none\";\r\n        if (node.visited) nodeStyle.backgroundColor = \"skyblue\";\r\n        if (node.isPathNode) nodeStyle.backgroundColor = \"green\";\r\n    };\r\n\r\n    // Reset css of node style to original state\r\n    static resetNodeStyle = (node) => {\r\n        const nodeStyle = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n        ).style;\r\n\r\n        nodeStyle.borderTop = \"1.6px solid white\";\r\n        nodeStyle.borderBottom = \"1.6px solid white\";\r\n        nodeStyle.borderRight = \"1.6px solid white\";\r\n        nodeStyle.borderLeft = \"1.6px solid white\";\r\n        nodeStyle.backgroundColor = \"#444444\";\r\n    };\r\n\r\n    static getDirection = (currNode, frontier) => {\r\n        const x = currNode.row - frontier.row;\r\n        const y = currNode.col - frontier.col;\r\n\r\n        if (x === 0 && y === 1) return \"UP\";\r\n        if (x === 0 && y === -1) return \"DOWN\";\r\n        if (x === 1 && y === 0) return \"LEFT\";\r\n        if (x === -1 && y === 0) return \"RIGHT\";\r\n    };\r\n\r\n    static calcCost = (currNode, adjNode) => {\r\n        const x = Math.abs(currNode.row - adjNode.row);\r\n        const y = Math.abs(currNode.col - adjNode.col);\r\n\r\n        return x + y;\r\n    };\r\n}\r\n","import MazeUtils from \"../mazeUtils\";\r\nimport NodeUtils from \"../nodeUtils\";\r\n\r\nexport const aStar = (grid) => {\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n\r\n    startNode.f = startNode.g = startNode.h = 0;\r\n\r\n    openSet.push(startNode);\r\n    while (openSet.length > 0) {\r\n        const currNode = getLowestCostFNode(openSet);\r\n        currNode.visited = true;\r\n        closedSet.push(currNode);\r\n\r\n        // Current node has reached the end of the maze\r\n        if (currNode === endNode) break;\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !closedSet.includes(frontier)\r\n            ) {\r\n                if (!openSet.includes(frontier)) {\r\n                    // Calculate g, h, and f for frontier\r\n                    frontier.g =\r\n                        currNode.g + NodeUtils.calcCost(currNode, frontier);\r\n                    frontier.h = calcHeuristic(endNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Push frontier to open set\r\n                    openSet.push(frontier);\r\n                } else if (frontier.g < currNode.g) {\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Recalculate g and f for frontier\r\n                    frontier.g =\r\n                        currNode.g + NodeUtils.calcCost(currNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return closedSet;\r\n};\r\n\r\n// The estimated movement cost to move from the\r\n// current node to the end node\r\n// Manhattan distance used to calculate heuristic\r\nconst calcHeuristic = (endNode, adjNode) => {\r\n    const x = Math.abs(endNode.row - adjNode.row);\r\n    const y = Math.abs(endNode.col - adjNode.col);\r\n\r\n    return x + y;\r\n};\r\n\r\nconst getLowestCostFNode = (openSet) => {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n        // If a new node with a lower f is found, replace index\r\n        if (openSet[index].f > openSet[i].f) index = i;\r\n    }\r\n\r\n    // Remove and return node with lowest f value from open set\r\n    return openSet.splice(index, 1)[0];\r\n};\r\n","import MazeUtils from \"../mazeUtils\";\r\nimport NodeUtils from \"../nodeUtils\";\r\n\r\nexport const dijkstra = (grid) => {\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n\r\n    openSet.push(startNode);\r\n    while (openSet.length > 0) {\r\n        const currNode = getLowestCostGNode(openSet);\r\n        currNode.visited = true;\r\n        closedSet.push(currNode);\r\n\r\n        // Current node has reached the end of the maze\r\n        if (currNode === endNode) break;\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !closedSet.includes(frontier)\r\n            ) {\r\n                if (!openSet.includes(frontier)) {\r\n                    frontier.g =\r\n                        currNode.g + NodeUtils.calcCost(currNode, frontier);\r\n\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Push frontier to open set\r\n                    openSet.push(frontier);\r\n                } else if (frontier.g < currNode.g) {\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Recalculate g for frontier\r\n                    frontier.g =\r\n                        currNode.g + NodeUtils.calcCost(currNode, frontier);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return closedSet;\r\n};\r\n\r\nconst getLowestCostGNode = (openSet) => {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n        // If a new node with a lower g is found, replace index\r\n        if (openSet[index].g > openSet[i].g) index = i;\r\n    }\r\n\r\n    // Remove and return node with lowest g value from open set\r\n    return openSet.splice(index, 1)[0];\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Node } from \"../Node/Node\";\r\nimport * as MazeGen from \"../../utils/mazeGeneration/index\";\r\nimport * as Pathfinding from \"../../utils/pathfinding/index\";\r\nimport MazeUtils from \"../../utils/mazeUtils\";\r\nimport NodeUtils from \"../../utils/nodeUtils\";\r\nimport \"./Grid.css\";\r\n\r\nlet grid = MazeUtils.initGrid();\r\n\r\nexport const Grid = (props) => {\r\n    useEffect(() => {\r\n        switch (props.status) {\r\n            case \"create\":\r\n                if (props.maze === \"Recursive Backtracker\") {\r\n                    const recursive = MazeGen.recursiveBacktracker(grid);\r\n                    generateMaze(recursive, 0);\r\n                } else if (props.maze === \"Prim's\") {\r\n                    const prims = MazeGen.primsAlgorithm(grid);\r\n                    generateMaze(prims, 0);\r\n                }\r\n                break;\r\n            case \"solve\":\r\n                if (props.pathfinding === \"A* Search\") {\r\n                    const pathfinding = Pathfinding.aStar(grid);\r\n                    generateMaze(pathfinding, 0);\r\n                } else if (props.pathfinding === \"Dijkstra's\") {\r\n                    const pathfinding = Pathfinding.dijkstra(grid);\r\n                    generateMaze(pathfinding, 0);\r\n                } else if (props.pathfinding === \"BFS\") {\r\n                    const pathfinding = Pathfinding.bfs(grid);\r\n                    generateMaze(pathfinding, 0);\r\n                } else if (props.pathfinding === \"DFS\") {\r\n                    const pathfinding = Pathfinding.dfs(grid);\r\n                    generateMaze(pathfinding, 0);\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    const path = MazeUtils.generatePath(grid[24][24]);\r\n                    generateMaze(path, 0);\r\n                }, 10000);\r\n                break;\r\n            default:\r\n                // Reset grid to initial state and reset all node styles\r\n                grid.splice(0, grid.length, ...MazeUtils.initGrid());\r\n                grid.forEach((row) => {\r\n                    row.forEach((node) => {\r\n                        NodeUtils.resetNodeStyle(node);\r\n                    });\r\n                });\r\n                break;\r\n        }\r\n    }, [props.status]);\r\n\r\n    const generateMaze = (algorithm, index) => {\r\n        if (index < algorithm.length) {\r\n            setTimeout(() => {\r\n                // Update css of current node\r\n                NodeUtils.updateNodeStyle(algorithm[index]);\r\n\r\n                // Recursive call with updated index\r\n                generateMaze(algorithm, index + 1);\r\n            }, 25);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <table className=\"grid\">\r\n            <tbody>\r\n                {grid.map((row, rowIndex) => (\r\n                    <tr className=\"grid-row\" key={rowIndex}>\r\n                        {row.map((node, key) => {\r\n                            return <Node node={node} key={key}></Node>;\r\n                        })}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n","import MazeUtils from \"../mazeUtils\";\r\n\r\nexport const primsAlgorithm = (grid) => {\r\n    const row = MazeUtils.getRandomIndex();\r\n    const col = MazeUtils.getRandomIndex();\r\n    const rootCell = grid[row][col];\r\n    const toVisit = [];\r\n    const visited = [];\r\n\r\n    toVisit.push(rootCell);\r\n    while (toVisit.length > 0) {\r\n        const currCell = toVisit.pop();\r\n        visited.push(currCell);\r\n\r\n        const frontiers = currCell.getFrontiers(grid);\r\n        if (frontiers.length > 0) {\r\n            // Randomize frontiers then traverse them\r\n            const shuffledFrontiers = MazeUtils.shuffle(frontiers);\r\n            shuffledFrontiers.forEach((frontier) => {\r\n                // Check if frontier is in neither sets\r\n                if (\r\n                    !visited.includes(frontier) &&\r\n                    !toVisit.includes(frontier)\r\n                ) {\r\n                    MazeUtils.breakWall(currCell, frontier);\r\n                    toVisit.push(frontier);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};\r\n","import MazeUtils from \"../mazeUtils\";\r\n\r\nexport const bfs = (grid) => {\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n    const queue = [];\r\n    const set = [];\r\n\r\n    queue.push(startNode);\r\n    while (queue.length > 0) {\r\n        const currNode = queue.shift();\r\n        currNode.visited = true;\r\n\r\n        set.push(currNode);\r\n        if (currNode === endNode) break;\r\n\r\n        const frontiers = MazeUtils.shuffle(currNode.getFrontiers(grid));\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !set.includes(frontier) &&\r\n                !queue.includes(frontier)\r\n            ) {\r\n                frontier.parent = currNode;\r\n                queue.push(frontier);\r\n            }\r\n        });\r\n    }\r\n\r\n    return set;\r\n};\r\n","import MazeUtils from \"../mazeUtils\";\r\n\r\nexport const dfs = (grid) => {\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n    const stack = [];\r\n    const set = [];\r\n\r\n    stack.push(startNode);\r\n    while (stack.length > 0) {\r\n        const currNode = stack.pop();\r\n        currNode.visited = true;\r\n\r\n        set.push(currNode);\r\n        if (currNode === endNode) break;\r\n\r\n        const frontiers = MazeUtils.shuffle(currNode.getFrontiers(grid));\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !set.includes(frontier) &&\r\n                !stack.includes(frontier)\r\n            ) {\r\n                frontier.parent = currNode;\r\n                stack.push(frontier);\r\n            }\r\n        });\r\n    }\r\n\r\n    return set;\r\n};\r\n","import React from \"react\";\r\nimport { Nav, NavDropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nexport const Navbar = (props) => {\r\n    const {\r\n        status,\r\n        maze,\r\n        pathfinding,\r\n        handleClickStatus,\r\n        handleClickMaze,\r\n        handleClickPathfinding,\r\n    } = props;\r\n\r\n    return (\r\n        <Nav className=\"navbar\">\r\n            <NavDropdown id=\"dropdown\" title={maze}>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Recursive Backtracker\"\r\n                    onClick={handleClickMaze}\r\n                >\r\n                    Recursive Backtracker\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Prim's\"\r\n                    onClick={handleClickMaze}\r\n                >\r\n                    Prim's\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown id=\"dropdown\" alignRight title={pathfinding}>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"A* Search\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    A* Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Dijkstra's\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    Dijkstra's\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"BFS\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    Breadth First Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"DFS\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    Depth First Search\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <button\r\n                name=\"create\"\r\n                disabled={maze === \"maze\" || status === \"solve\"}\r\n                onClick={handleClickStatus}\r\n            >\r\n                CREATE\r\n            </button>\r\n            <button name=\"clear\" onClick={handleClickStatus}>\r\n                CLEAR\r\n            </button>\r\n            <button\r\n                name=\"solve\"\r\n                disabled={pathfinding === \"pathfinding\" || status !== \"create\"}\r\n                onClick={handleClickStatus}\r\n            >\r\n                SOLVE\r\n            </button>\r\n        </Nav>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Grid } from \"./components/Grid/Grid\";\r\nimport { Navbar } from \"./components/Navbar/Navbar\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst App = () => {\r\n    const [status, setStatus] = useState(\"\");\r\n    const [maze, setMaze] = useState(\"maze\");\r\n    const [pathfinding, setPathfinding] = useState(\"pathfinding\");\r\n\r\n    const handleClickStatus = (e) => {\r\n        e.preventDefault();\r\n        setStatus(e.target.name);\r\n    };\r\n\r\n    const handleClickMaze = (e) => {\r\n        e.preventDefault();\r\n        setMaze(e.target.name);\r\n    };\r\n\r\n    const handleClickPathfinding = (e) => {\r\n        e.preventDefault();\r\n        setPathfinding(e.target.name);\r\n    };\r\n    \r\n    return (\r\n        <Container fluid>\r\n            <Navbar\r\n                status={status}\r\n                maze={maze}\r\n                pathfinding={pathfinding}\r\n                handleClickStatus={handleClickStatus}\r\n                handleClickMaze={handleClickMaze}\r\n                handleClickPathfinding={handleClickPathfinding}\r\n            />\r\n            <Grid status={status} maze={maze} pathfinding={pathfinding} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}