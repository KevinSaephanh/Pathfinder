{"version":3,"sources":["components/Node/Node.js","utils/node.js","utils/mazeUtils.js","utils/pathfinding/dijkstra.js","utils/pathfinding/aStar.js","components/Grid/Grid.js","utils/mazeGeneration/recursiveBacktracker.js","utils/mazeGeneration/prims.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","useState","row","col","visited","walls","isPathNode","nodeData","setNodeData","useEffect","interval","setInterval","count","clearInterval","key","id","className","getFrontiers","grid","top","bottom","right","left","frontiers","isValidFrontier","push","frontier","length","this","parent","g","h","f","initGrid","newGrid","node","breakWall","currNode","row1","col1","row2","x","y","shuffle","arr","i","j","Math","floor","random","getRandomIndex","generatePath","endNode","current","isValidPath","adjNode","calcCost","abs","getLowestCostGNode","openSet","index","splice","calcHeuristic","getLowestCostFNode","Grid","setGrid","status","maze","getMaze","getNewMaze","aStarMaze","getPathfinding","pathfinding","algorithm","stack","currCell","MazeUtils","cell","pop","includes","recursiveBacktracker","rootCell","toVisit","forEach","primsAlgorithm","closedSet","startNode","console","log","aStar","dijkstra","oldGrid","gridNode","map","rowIndex","Navbar","handleClickStatus","handleClickMaze","handleClickPathfinding","Nav","NavDropdown","title","Item","name","onClick","alignRight","disabled","App","setStatus","setMaze","setPathfinding","Container","fluid","e","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f330611f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport const Node = (props) => {\r\n    const [nodeData, setNodeData] = useState({\r\n        row: null,\r\n        col: null,\r\n        visited: false,\r\n        walls: [true, true, true, true],\r\n        isPathNode: false,\r\n    });\r\n    const { row, col, visited, walls, isPathNode } = nodeData;\r\n\r\n    useEffect(() => {\r\n        // Set each node in sequence to animate\r\n        // the generation of the maze\r\n        const interval = setInterval(() => {\r\n            setNodeData(props);\r\n        }, 5 * props.count);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [props]);\r\n\r\n    return (\r\n        <td\r\n            key={`(${row},${col})`}\r\n            id={`node-${row}-${col}`}\r\n            className={`node \r\n                top-${walls[0]} \r\n                bottom-${walls[1]} \r\n                right-${walls[2]} \r\n                left-${walls[3]} `}\r\n        >\r\n            {visited ? (\r\n                <div className={`visited-${visited} path-${isPathNode}`}></div>\r\n            ) : null}\r\n        </td>\r\n    );\r\n};\r\n","export default class Node {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.visited = false;\r\n        this.walls = [true, true, true, true];\r\n        this.parent = null;\r\n        this.isPathNode = false;\r\n        this.g = 0;\r\n        this.h = 0;\r\n        this.f = 0;\r\n    }\r\n\r\n    // This method returns all neighboring nodes of the current node\r\n    getFrontiers = (grid) => {\r\n        let top = [this.row - 1, this.col];\r\n        let bottom = [this.row + 1, this.col];\r\n        let right = [this.row, this.col + 1];\r\n        let left = [this.row, this.col - 1];\r\n        const frontiers = [];\r\n\r\n        if (this.isValidFrontier(top, grid)) {\r\n            frontiers.push(grid[top[0]][top[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(bottom, grid)) {\r\n            frontiers.push(grid[bottom[0]][bottom[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(right, grid)) {\r\n            frontiers.push(grid[right[0]][right[1]]);\r\n        }\r\n\r\n        if (this.isValidFrontier(left, grid)) {\r\n            frontiers.push(grid[left[0]][left[1]]);\r\n        }\r\n\r\n        return frontiers;\r\n    };\r\n\r\n    // This method checks a frontier to see if it lies within the bounds of the grid\r\n    isValidFrontier = (frontier, grid) => {\r\n        return (\r\n            frontier[0] < grid.length &&\r\n            frontier[0] >= 0 &&\r\n            frontier[1] < grid.length &&\r\n            frontier[1] >= 0\r\n        );\r\n    };\r\n}\r\n","import Node from \"./node\";\r\n\r\nexport const initGrid = () => {\r\n    const newGrid = [];\r\n    for (let row = 0; row < 25; row++) {\r\n        newGrid[row] = []; // Current row\r\n        for (let col = 0; col < 25; col++) {\r\n            const node = new Node(row, col);\r\n            newGrid[row].push(node);\r\n        }\r\n    }\r\n    return newGrid;\r\n};\r\n\r\n// This method uses randomized prim's algorithm\r\n// to generate a completely random maze\r\nexport const primsMaze = (grid) => {\r\n    const row = Math.floor(Math.random() * 20);\r\n    const col = Math.floor(Math.random() * 20);\r\n    const rootNode = grid[row][col];\r\n    const toVisit = [];\r\n    const visited = [];\r\n\r\n    toVisit.push(rootNode);\r\n    while (toVisit.length > 0) {\r\n        const currNode = toVisit.pop();\r\n        visited.push(currNode);\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        if (frontiers.length > 0) {\r\n            // Randomize frontiers then traverse them\r\n            const shuffledFrontiers = shuffle(frontiers);\r\n            shuffledFrontiers.forEach((frontier) => {\r\n                frontier = grid[frontier[0]][frontier[1]];\r\n\r\n                // Check if frontier is in neither sets\r\n                if (\r\n                    !visited.includes(frontier) &&\r\n                    !toVisit.includes(frontier)\r\n                ) {\r\n                    breakWall(currNode, frontier);\r\n                    toVisit.push(frontier);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};\r\n\r\n// This method takes two nodes and determines which wall to break\r\n// depending on the results of subtracting the first node's row/col\r\n// by the neighboring node's row/col\r\nexport const breakWall = (currNode, frontier) => {\r\n    const row1 = currNode.row;\r\n    const col1 = currNode.col;\r\n    const row2 = frontier.row;\r\n    const col2 = frontier.col;\r\n    const x = col1 - col2;\r\n    const y = row1 - row2;\r\n\r\n    // Break top wall\r\n    if (x === 0 && y === 1) {\r\n        currNode.walls[0] = false;\r\n        frontier.walls[1] = false;\r\n    }\r\n    // Break bottom wall\r\n    else if (x === 0 && y === -1) {\r\n        currNode.walls[1] = false;\r\n        frontier.walls[0] = false;\r\n    }\r\n    // Break left wall\r\n    if (x === 1 && y === 0) {\r\n        currNode.walls[3] = false;\r\n        frontier.walls[2] = false;\r\n    }\r\n    // Break right wall\r\n    else if (x === -1 && y === 0) {\r\n        currNode.walls[2] = false;\r\n        frontier.walls[3] = false;\r\n    }\r\n};\r\n\r\n// Fisher-Yates shuffle algorithm\r\n// Used to randomize order of frontiers\r\nexport const shuffle = (arr) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n};\r\n\r\n// This method returns a random number from 0 to 24\r\n// Used to retrieve a random node\r\nexport const getRandomIndex = () => {\r\n    return Math.floor(Math.random() * 24);\r\n};\r\n\r\nexport const getDirection = (currNode, frontier) => {\r\n    const x = currNode.row - frontier.row;\r\n    const y = currNode.col - frontier.col;\r\n\r\n    if (x === 0 && y === 1) {\r\n        return \"UP\";\r\n    } else if (x === 0 && y === -1) {\r\n        return \"DOWN\";\r\n    } else if (x === 1 && y === 0) {\r\n        return \"LEFT\";\r\n    } else if (x === -1 && y === 0) {\r\n        return \"RIGHT\";\r\n    }\r\n};\r\n\r\n// This method generates the optimal path to traverse the maze\r\n// by backtracking (starting from the end node) using the parent\r\nexport const generatePath = (endNode) => {\r\n    let current = endNode;\r\n    current.isPathNode = true;\r\n\r\n    while (current.parent) {\r\n        current.parent.isPathNode = true;\r\n        current = current.parent;\r\n    }\r\n};\r\n\r\n// This method checks if there is a wall between the current node\r\n// and the adjacent node to determine if the path is traversable\r\nexport const isValidPath = (currNode, adjNode) => {\r\n    const row1 = currNode.row;\r\n    const col1 = currNode.col;\r\n    const row2 = adjNode.row;\r\n    const col2 = adjNode.col;\r\n\r\n    const x = col1 - col2;\r\n    const y = row1 - row2;\r\n\r\n    if (x === 0 && y === 1) {\r\n        return currNode.walls[0] === false && adjNode.walls[1] === false;\r\n    } else if (x === 0 && y === -1) {\r\n        return currNode.walls[1] === false && adjNode.walls[0] === false;\r\n    } else if (x === 1 && y === 0) {\r\n        return currNode.walls[3] === false && adjNode.walls[2] === false;\r\n    } else if (x === -1 && y === 0) {\r\n        return currNode.walls[2] === false && adjNode.walls[3] === false;\r\n    }\r\n};\r\n\r\nexport const calcCost = (currNode, adjNode) => {\r\n    const x = Math.abs(currNode.row - adjNode.row);\r\n    const y = Math.abs(currNode.col - adjNode.col);\r\n\r\n    return x + y;\r\n};\r\n","import * as MazeUtils from \"../mazeUtils\";\r\n\r\nexport const dijkstra = (grid) => {\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n\r\n    openSet.push(startNode);\r\n    while (openSet.length > 0) {\r\n        const currNode = getLowestCostGNode(openSet);\r\n        currNode.visited = true;\r\n        closedSet.push(currNode);\r\n\r\n        // Current node has reached the end of the maze\r\n        if (currNode === endNode) {\r\n            console.log(\"SOLVED!\");\r\n            break;\r\n        }\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !closedSet.includes(frontier)\r\n            ) {\r\n                if (!openSet.includes(frontier)) {\r\n                    frontier.g = currNode.g + MazeUtils.calcCost(currNode, frontier);\r\n\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Push frontier to open set\r\n                    openSet.push(frontier);\r\n                } else if (frontier.g < currNode.g) {\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Recalculate g for frontier\r\n                    frontier.g = currNode.g + MazeUtils.calcCost(currNode, frontier);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    MazeUtils.generatePath(endNode);\r\n\r\n    return closedSet;\r\n};\r\n\r\nconst getLowestCostGNode = (openSet) => {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n        // If a new node with a lower g is found, replace index\r\n        if (openSet[index].g > openSet[i].g) {\r\n            index = i;\r\n        }\r\n    }\r\n\r\n    // Remove and return node with lowest g value from open set\r\n    return openSet.splice(index, 1)[0];\r\n};\r\n","import * as MazeUtils from \"../mazeUtils\";\r\n\r\nexport const aStar = (grid) => {\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n\r\n    openSet.push(startNode);\r\n    while (openSet.length > 0) {\r\n        const currNode = getLowestCostFNode(openSet);\r\n        currNode.visited = true;\r\n        closedSet.push(currNode);\r\n\r\n        // Current node has reached the end of the maze\r\n        if (currNode === endNode) {\r\n            console.log(\"SOLVED!\");\r\n            break;\r\n        }\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        frontiers.forEach((frontier) => {\r\n            if (\r\n                MazeUtils.isValidPath(currNode, frontier) &&\r\n                !closedSet.includes(frontier)\r\n            ) {\r\n                if (!openSet.includes(frontier)) {\r\n                    // Calculate g, h, and f for frontier\r\n                    frontier.g = currNode.g + MazeUtils.calcCost(currNode, frontier);\r\n                    frontier.h = calcHeuristic(endNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Push frontier to open set\r\n                    openSet.push(frontier);\r\n                } else if (frontier.g < currNode.g) {\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Recalculate g and f for frontier\r\n                    frontier.g = currNode.g + MazeUtils.calcCost(currNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    MazeUtils.generatePath(endNode);\r\n\r\n    return closedSet;\r\n};\r\n\r\n// The estimated movement cost to move from the\r\n// current node to the end node\r\n// Manhattan distance used to calculate heuristic\r\nconst calcHeuristic = (endNode, adjNode) => {\r\n    const x = Math.abs(endNode.row - adjNode.row);\r\n    const y = Math.abs(endNode.col - adjNode.col);\r\n\r\n    return x + y;\r\n};\r\n\r\nconst getLowestCostFNode = (openSet) => {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n        // If a new node with a lower f is found, replace index\r\n        if (openSet[index].f > openSet[i].f) {\r\n            index = i;\r\n        }\r\n    }\r\n\r\n    // Remove and return node with lowest f value from open set\r\n    return openSet.splice(index, 1)[0];\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\nimport { Node } from \"../Node/Node\";\r\nimport { initGrid } from \"../../utils/mazeUtils\";\r\nimport { primsAlgorithm } from \"../../utils/mazeGeneration/prims\";\r\nimport { recursiveBacktracker } from \"../../utils/mazeGeneration/recursiveBacktracker\";\r\nimport { dijkstra } from \"../../utils/pathfinding/dijkstra\";\r\nimport { aStar } from \"../../utils/pathfinding/aStar\";\r\n\r\nexport const Grid = (props) => {\r\n    const [grid, setGrid] = useState([[]]);\r\n    let count = 1; // Used for delayed individual node rendering\r\n\r\n    useEffect(() => {\r\n        switch (props.status) {\r\n            case \"create\":\r\n                const maze = getMaze(props.maze);\r\n                getNewMaze(maze, [...grid]);\r\n                break;\r\n            case \"solve\":\r\n                const aStarMaze = getPathfinding(props.pathfinding);\r\n                getNewMaze(aStarMaze, [...grid]);\r\n                break;\r\n            default:\r\n                setGrid(initGrid);\r\n                break;\r\n        }\r\n    }, [props.status]);\r\n\r\n    const getMaze = (algorithm) => {\r\n        if (algorithm === \"Recursive Backtracker\") {\r\n            return recursiveBacktracker(grid);\r\n        } else if (algorithm === \"Prim's\") {\r\n            return primsAlgorithm(grid);\r\n        }\r\n    };\r\n\r\n    const getPathfinding = (algorithm) => {\r\n        if (algorithm === \"A* Search\") {\r\n            return aStar(grid);\r\n        } else if (algorithm === \"Dijkstra's\") {\r\n            return dijkstra(grid);\r\n        }\r\n    };\r\n\r\n    const getNewMaze = (maze, oldGrid) => {\r\n        maze.forEach((node) => {\r\n            // Make a shallow copy of the specific node and update properties\r\n            const gridNode = { ...oldGrid[node.row][node.col] };\r\n            gridNode.row = node.row;\r\n            gridNode.col = node.col;\r\n            gridNode.walls = node.walls;\r\n            gridNode.visited = node.visited;\r\n            gridNode.isPathNode = node.isPathNode;\r\n\r\n            // Put it back in the array\r\n            oldGrid[node.row][node.col] = gridNode;\r\n\r\n            // Set new grid with updated node\r\n            setGrid(oldGrid);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <table className=\"grid\">\r\n            <tbody>\r\n                {grid.map((row, rowIndex) => (\r\n                    <tr className=\"grid-row\" key={rowIndex}>\r\n                        {row.map((node, key) => {\r\n                            const {\r\n                                row,\r\n                                col,\r\n                                visited,\r\n                                walls,\r\n                                isPathNode,\r\n                            } = node;\r\n                            count++;\r\n\r\n                            return (\r\n                                <Node\r\n                                    {...{\r\n                                        key,\r\n                                        row,\r\n                                        col,\r\n                                        visited,\r\n                                        walls,\r\n                                        count,\r\n                                        isPathNode,\r\n                                    }}\r\n                                ></Node>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n","import * as MazeUtils from \"../mazeUtils\";\r\n\r\nexport const recursiveBacktracker = (grid) => {\r\n    const stack = [];\r\n    const visited = [];\r\n    const currCell =\r\n        grid[MazeUtils.getRandomIndex()][MazeUtils.getRandomIndex()];\r\n\r\n    // Push start cell to stack and visited set\r\n    stack.push(currCell);\r\n    visited.push(currCell);\r\n\r\n    while (stack.length > 0) {\r\n        const cell = stack.pop();\r\n\r\n        // Get Frontiers and randomize the order\r\n        const frontiers = MazeUtils.shuffle(cell.getFrontiers(grid));\r\n\r\n        for (let frontier of frontiers) {\r\n            if (!visited.includes(frontier)) {\r\n                stack.push(cell);\r\n                MazeUtils.breakWall(cell, frontier);\r\n                visited.push(frontier);\r\n                stack.push(frontier);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};","import * as MazeUtils from \"../mazeUtils\";\r\n\r\n// This method uses randomized prim's algorithm\r\n// to generate a completely random maze\r\nexport const primsAlgorithm = (grid) => {\r\n    const row = MazeUtils.getRandomIndex();\r\n    const col = MazeUtils.getRandomIndex();\r\n    const rootCell = grid[row][col];\r\n    const toVisit = [];\r\n    const visited = [];\r\n\r\n    toVisit.push(rootCell);\r\n    while (toVisit.length > 0) {\r\n        const currCell = toVisit.pop();\r\n        visited.push(currCell);\r\n\r\n        const frontiers = currCell.getFrontiers(grid);\r\n        if (frontiers.length > 0) {\r\n            // Randomize frontiers then traverse them\r\n            const shuffledFrontiers = MazeUtils.shuffle(frontiers);\r\n            shuffledFrontiers.forEach((frontier) => {\r\n                // Check if frontier is in neither sets\r\n                if (\r\n                    !visited.includes(frontier) &&\r\n                    !toVisit.includes(frontier)\r\n                ) {\r\n                    MazeUtils.breakWall(currCell, frontier);\r\n                    toVisit.push(frontier);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};\r\n","import React from \"react\";\r\nimport { Nav, NavDropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nexport const Navbar = (props) => {\r\n    const {\r\n        status,\r\n        maze,\r\n        pathfinding,\r\n        handleClickStatus,\r\n        handleClickMaze,\r\n        handleClickPathfinding,\r\n    } = props;\r\n\r\n    return (\r\n        <Nav className=\"navbar\">\r\n            <NavDropdown id=\"dropdown\" title={maze}>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Recursive Backtracker\"\r\n                    onClick={handleClickMaze}\r\n                >\r\n                    Recursive Backtracker\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Prim's\"\r\n                    onClick={handleClickMaze}\r\n                >\r\n                    Prim's\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown id=\"dropdown\" alignRight title={pathfinding}>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"A* Search\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    A* Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                    className=\"dropdown-item\"\r\n                    name=\"Dijkstra's\"\r\n                    onClick={handleClickPathfinding}\r\n                >\r\n                    Dijkstra's\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <button\r\n                name=\"create\"\r\n                disabled={maze === \"maze\" || status === \"solve\"}\r\n                onClick={handleClickStatus}\r\n            >\r\n                CREATE\r\n            </button>\r\n            <button name=\"clear\" onClick={handleClickStatus}>\r\n                CLEAR\r\n            </button>\r\n            <button\r\n                name=\"solve\"\r\n                disabled={pathfinding === \"pathfinding\" || status !== \"create\"}\r\n                onClick={handleClickStatus}\r\n            >\r\n                SOLVE\r\n            </button>\r\n        </Nav>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Grid } from \"./components/Grid/Grid\";\r\nimport { Navbar } from \"./components/Navbar/Navbar\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst App = () => {\r\n    const [status, setStatus] = useState(\"\");\r\n    const [maze, setMaze] = useState(\"maze\");\r\n    const [pathfinding, setPathfinding] = useState(\"pathfinding\");\r\n\r\n    const handleClickStatus = (e) => {\r\n        e.preventDefault();\r\n        setStatus(e.target.name);\r\n    };\r\n\r\n    const handleClickMaze = (e) => {\r\n        e.preventDefault();\r\n        setMaze(e.target.name);\r\n    };\r\n\r\n    const handleClickPathfinding = (e) => {\r\n        e.preventDefault();\r\n        setPathfinding(e.target.name);\r\n    };\r\n\r\n    console.log(maze);\r\n    console.log(status);\r\n    console.log(pathfinding);\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Navbar\r\n                status={status}\r\n                maze={maze}\r\n                pathfinding={pathfinding}\r\n                handleClickStatus={handleClickStatus}\r\n                handleClickMaze={handleClickMaze}\r\n                handleClickPathfinding={handleClickPathfinding}\r\n            />\r\n            <Grid status={status} maze={maze} pathfinding={pathfinding} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}