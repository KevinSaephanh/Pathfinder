{"version":3,"sources":["components/Cell/Cell.js","utils/cell.js","utils/maze.js","utils/aStar.js","components/Grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","row","col","visited","walls","isPathNode","cellData","setCellData","useEffect","interval","setInterval","count","clearInterval","key","id","className","getFrontiers","grid","top","bottom","right","left","frontiers","isValidFrontier","push","frontier","length","this","parent","g","h","f","initGrid","newGrid","cell","breakWall","currCell","row1","col1","row2","x","y","shuffle","arr","i","j","Math","floor","random","calcCost","currNode","adjNode","abs","calcHeuristic","endNode","getLowestCostFNode","openSet","index","splice","isValidPath","generatePath","current","Grid","setGrid","status","maze","rootCell","toVisit","pop","forEach","includes","primsMaze","getNewMaze","aStarMaze","closedSet","startNode","console","log","aStar","oldGrid","gridCell","map","rowIndex","App","setStatus","handleClick","e","preventDefault","target","name","disabled","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d5848f5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport const Cell = (props) => {\r\n    const [cellData, setCellData] = useState({\r\n        row: null,\r\n        col: null,\r\n        visited: false,\r\n        walls: [true, true, true, true],\r\n        isPathNode: false,\r\n    });\r\n    const { row, col, visited, walls, isPathNode } = cellData;\r\n\r\n    useEffect(() => {\r\n        // Set each cell in sequence to animate\r\n        // the generation of the maze\r\n        const interval = setInterval(() => {\r\n            setCellData(props);\r\n        }, 5 * props.count);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [props]);\r\n\r\n    return (\r\n        <td\r\n            key={`(${row},${col})`}\r\n            id={`cell-${row}-${col}`}\r\n            className={`cell \r\n                top-${walls[0]} \r\n                bottom-${walls[1]} \r\n                right-${walls[2]} \r\n                left-${walls[3]} `}\r\n        >\r\n            {visited ? (\r\n                <div className={`visited-${visited} path-${isPathNode}`}></div>\r\n            ) : null}\r\n        </td>\r\n    );\r\n};\r\n","export default class Cell {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.visited = false;\r\n        this.walls = [true, true, true, true];\r\n        this.parent = null;\r\n        this.isPathNode = false;\r\n        this.g = 0;\r\n        this.h = 0;\r\n        this.f = 0;\r\n    }\r\n\r\n    // This method returns all neighboring cells of the current cell\r\n    getFrontiers = (grid) => {\r\n        let top = [this.row - 1, this.col];\r\n        let bottom = [this.row + 1, this.col];\r\n        let right = [this.row, this.col + 1];\r\n        let left = [this.row, this.col - 1];\r\n        const frontiers = [];\r\n\r\n        if (this.isValidFrontier(top, grid)) {\r\n            frontiers.push(top);\r\n        }\r\n\r\n        if (this.isValidFrontier(bottom, grid)) {\r\n            frontiers.push(bottom);\r\n        }\r\n\r\n        if (this.isValidFrontier(right, grid)) {\r\n            frontiers.push(right);\r\n        }\r\n\r\n        if (this.isValidFrontier(left, grid)) {\r\n            frontiers.push(left);\r\n        }\r\n\r\n        return frontiers;\r\n    };\r\n\r\n    // This method checks a frontier to see if it lies within the bounds of the grid\r\n    isValidFrontier = (frontier, grid) => {\r\n        return (\r\n            frontier[0] < grid.length &&\r\n            frontier[0] >= 0 &&\r\n            frontier[1] < grid.length &&\r\n            frontier[1] >= 0\r\n        );\r\n    };\r\n}\r\n","import Cell from \"./cell\";\r\n\r\nexport const initGrid = () => {\r\n    const newGrid = [];\r\n    for (let row = 0; row < 25; row++) {\r\n        newGrid[row] = []; // Current row\r\n        for (let col = 0; col < 25; col++) {\r\n            const cell = new Cell(row, col);\r\n            newGrid[row].push(cell);\r\n        }\r\n    }\r\n    return newGrid;\r\n};\r\n\r\n// This method uses randomized prim's algorithm\r\n// to generate a completely random maze\r\nexport const primsMaze = (grid) => {\r\n    const row = Math.floor(Math.random() * 20);\r\n    const col = Math.floor(Math.random() * 20);\r\n    const rootCell = grid[row][col];\r\n    const toVisit = [];\r\n    const visited = [];\r\n\r\n    toVisit.push(rootCell);\r\n    while (toVisit.length > 0) {\r\n        const currCell = toVisit.pop();\r\n        visited.push(currCell);\r\n\r\n        const frontiers = currCell.getFrontiers(grid);\r\n        if (frontiers.length > 0) {\r\n            // Randomize frontiers then traverse them\r\n            const shuffledFrontiers = shuffle(frontiers);\r\n            shuffledFrontiers.forEach((frontier) => {\r\n                frontier = grid[frontier[0]][frontier[1]];\r\n\r\n                // Check if frontier is in neither sets\r\n                if (\r\n                    !visited.includes(frontier) &&\r\n                    !toVisit.includes(frontier)\r\n                ) {\r\n                    breakWall(currCell, frontier);\r\n                    toVisit.push(frontier);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return visited;\r\n};\r\n\r\n// This method takes two cells and determines which wall to break\r\n// depending on the results of subtracting the first cell's row/col\r\n// by the neighboring cell's row/col\r\nconst breakWall = (currCell, frontier) => {\r\n    const row1 = currCell.row;\r\n    const col1 = currCell.col;\r\n    const row2 = frontier.row;\r\n    const col2 = frontier.col;\r\n    const x = col1 - col2;\r\n    const y = row1 - row2;\r\n\r\n    // Break top wall\r\n    if (x === 0 && y === 1) {\r\n        currCell.walls[0] = false;\r\n        frontier.walls[1] = false;\r\n    }\r\n    // Break bottom wall\r\n    else if (x === 0 && y === -1) {\r\n        currCell.walls[1] = false;\r\n        frontier.walls[0] = false;\r\n    }\r\n    // Break left wall\r\n    if (x === 1 && y === 0) {\r\n        currCell.walls[3] = false;\r\n        frontier.walls[2] = false;\r\n    }\r\n    // Break right wall\r\n    else if (x === -1 && y === 0) {\r\n        currCell.walls[2] = false;\r\n        frontier.walls[3] = false;\r\n    }\r\n};\r\n\r\n// Fisher-Yates shuffle algorithm\r\n// Used to randomize order of frontiers\r\nconst shuffle = (arr) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n};\r\n","export const aStar = (grid) => {\r\n    const openSet = [];\r\n    const closedSet = [];\r\n    const startNode = grid[0][0];\r\n    const endNode = grid[24][24];\r\n\r\n    openSet.push(startNode);\r\n    while (openSet.length > 0) {\r\n        const currNode = getLowestCostFNode(openSet);\r\n        currNode.visited = true;\r\n        closedSet.push(currNode);\r\n\r\n        // Current node has reached the end of the maze\r\n        if (currNode === endNode) {\r\n            console.log(\"SOLVED!\");\r\n            break;\r\n        }\r\n\r\n        const frontiers = currNode.getFrontiers(grid);\r\n        frontiers.forEach((frontier) => {\r\n            frontier = grid[frontier[0]][frontier[1]];\r\n\r\n            if (\r\n                isValidPath(currNode, frontier) &&\r\n                !closedSet.includes(frontier)\r\n            ) {\r\n                if (!openSet.includes(frontier)) {\r\n                    // Calculate g, h, and f for frontier\r\n                    frontier.g = currNode.g + calcCost(currNode, frontier);\r\n                    frontier.h = calcHeuristic(endNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Push frontier to open set\r\n                    openSet.push(frontier);\r\n                } else if (frontier.g < currNode.g) {\r\n                    // Make parent of frontier equal to current node\r\n                    frontier.parent = currNode;\r\n\r\n                    // Recalculate g and g for frontier\r\n                    frontier.g = currNode.g + calcCost(currNode, frontier);\r\n                    frontier.f = frontier.g + frontier.h;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    generatePath(endNode);\r\n\r\n    return closedSet;\r\n};\r\n\r\nconst calcCost = (currNode, adjNode) => {\r\n    const x = Math.abs(currNode.row - adjNode.row);\r\n    const y = Math.abs(currNode.col - adjNode.col);\r\n\r\n    return x + y;\r\n};\r\n\r\n// The estimated movement cost to move from the\r\n// current node to the end node\r\n// Manhattan distance used to calculate heuristic\r\nconst calcHeuristic = (endNode, adjNode) => {\r\n    const x = Math.abs(endNode.row - adjNode.row);\r\n    const y = Math.abs(endNode.col - adjNode.col);\r\n\r\n    return x + y;\r\n};\r\n\r\nconst getLowestCostFNode = (openSet) => {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n        // If a new node with a lower f is found, replace index\r\n        if (openSet[index].f > openSet[i].f) {\r\n            index = i;\r\n        }\r\n    }\r\n\r\n    // Remove and return node with lowest f value from open set\r\n    return openSet.splice(index, 1)[0];\r\n};\r\n\r\n// This method checks if there is a wall between the current node\r\n// and the adjacent node to determine if the path is traversable\r\nconst isValidPath = (currNode, adjNode) => {\r\n    const row1 = currNode.row;\r\n    const col1 = currNode.col;\r\n    const row2 = adjNode.row;\r\n    const col2 = adjNode.col;\r\n\r\n    const x = col1 - col2;\r\n    const y = row1 - row2;\r\n\r\n    if (x === 0 && y === 1) {\r\n        return currNode.walls[0] === false && adjNode.walls[1] === false;\r\n    } else if (x === 0 && y === -1) {\r\n        return currNode.walls[1] === false && adjNode.walls[0] === false;\r\n    } else if (x === 1 && y === 0) {\r\n        return currNode.walls[3] === false && adjNode.walls[2] === false;\r\n    } else if (x === -1 && y === 0) {\r\n        return currNode.walls[2] === false && adjNode.walls[3] === false;\r\n    }\r\n};\r\n\r\nconst generatePath = (endNode) => {\r\n    let current = endNode;\r\n    current.isPathNode = true;\r\n\r\n    while (current.parent) {\r\n        // Set parent of current node as part of the optimal path\r\n        current.parent.isPathNode = true;\r\n        current = current.parent;\r\n    }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Grid.css\";\r\nimport { Cell } from \"../Cell/Cell\";\r\nimport { primsMaze, initGrid } from \"../../utils/maze\";\r\nimport { aStar } from \"../../utils/aStar\";\r\n\r\nexport const Grid = (props) => {\r\n    const [grid, setGrid] = useState([[]]);\r\n    let count = 1; // Used for delayed individual cell rendering\r\n\r\n    useEffect(() => {\r\n        switch (props.status) {\r\n            case \"generate\":\r\n                const maze = primsMaze(grid);\r\n                getNewMaze(maze, [...grid]);\r\n                break;\r\n            case \"solve\":\r\n                const aStarMaze = aStar(grid);\r\n                getNewMaze(aStarMaze, [...grid]);\r\n                break;\r\n            default:\r\n                setGrid(initGrid);\r\n                break;\r\n        }\r\n    }, [props.status]);\r\n\r\n    const getNewMaze = (maze, oldGrid) => {\r\n        maze.forEach((cell) => {\r\n            // Make a shallow copy of the specific cell and update properties\r\n            const gridCell = { ...oldGrid[cell.row][cell.col] };\r\n            gridCell.row = cell.row;\r\n            gridCell.col = cell.col;\r\n            gridCell.walls = cell.walls;\r\n            gridCell.visited = cell.visited;\r\n            gridCell.isPathNode = cell.isPathNode;\r\n\r\n            // Put it back in the array\r\n            oldGrid[cell.row][cell.col] = gridCell;\r\n\r\n            // Set new grid with updated cell\r\n            setGrid(oldGrid);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <table className=\"grid\">\r\n            <tbody>\r\n                {grid.map((row, rowIndex) => (\r\n                    <tr className=\"grid-row\" key={rowIndex}>\r\n                        {row.map((cell, key) => {\r\n                            const {\r\n                                row,\r\n                                col,\r\n                                visited,\r\n                                walls,\r\n                                isPathNode,\r\n                            } = cell;\r\n                            count++;\r\n\r\n                            return (\r\n                                <Cell\r\n                                    {...{\r\n                                        key,\r\n                                        row,\r\n                                        col,\r\n                                        visited,\r\n                                        walls,\r\n                                        count,\r\n                                        isPathNode,\r\n                                    }}\r\n                                ></Cell>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Grid } from \"./components/Grid/Grid\";\r\n\r\nconst App = () => {\r\n    const [status, setStatus] = useState(null);\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        setStatus(e.target.name);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <header>\r\n                <button\r\n                    name=\"generate\"\r\n                    disabled={status === \"solve\"}\r\n                    onClick={handleClick}\r\n                >\r\n                    GENERATE\r\n                </button>\r\n                <button name=\"clear\" onClick={handleClick}>\r\n                    CLEAR\r\n                </button>\r\n                <button\r\n                    name=\"solve\"\r\n                    disabled={status !== \"generate\"}\r\n                    onClick={handleClick}\r\n                >\r\n                    SOLVE\r\n                </button>\r\n            </header>\r\n            <Grid status={status} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}